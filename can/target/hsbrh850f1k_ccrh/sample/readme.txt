
	TOPPRES/A-CAN サンプルプログラム実行手順
        ＜HSBRH850F1Kターゲット依存部用＞

本ドキュメントは，TOPPRES/A-CAN(hsbrh850f1k_ccrh)の動作確認のための
サンプルプログラムをTOPPERS/ATK2で実行する手順を示す．

----------------------------------------------------------------------
TOPPERS/A-CAN
    Automotive CAN

Copyright (C) 2019- by Center for Embedded Computing Systems
                           Graduate School of Informatics, Nagoya Univ., JAPAN
Copyright (C) 2014-2015 by FUJI SOFT INCORPORATED, JAPAN

上記著作権者は，以下の (1)~(3)の条件を満たす場合に限り，本ドキュメ
ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
(1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
    および下記の無保証規定が，そのままの形でドキュメント中に含まれて
    いること．
(2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
    を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
    ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
    りではない．
(3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
    からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
    本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
    く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

本ドキュメントは，AUTOSAR（AUTomotive Open System ARchitecture）仕様
に基づいている．上記の許諾は，AUTOSARの知的財産権を許諾するものではな
い．AUTOSARは，AUTOSAR仕様に基づいたソフトウェアを商用目的で利用する
者に対して，AUTOSARパートナーになることを求めている．

本ドキュメントは，無保証で提供されているものである．上記著作権者およ
びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
により直接的または間接的に生じたいかなる損害に関しても，その責任を負
わない．

$Id: readme.txt 13 2015-07-15 08:58:53Z fujisft-kaitori $
----------------------------------------------------------------------

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(1) TOPPERS/ATK2動作環境の用意
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
TOPPERS/ATK2を入手し，付属のサンプルプログラムが動作する環境を構築する．

※以下，TOPPERS/ATK2-SC1を使用した場合の手順を示す

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(2) ビルド及びデバッグ環境
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ビルド及びデバッグ環境はCS+を使用する．動作確認を行ったバージョンは次の
通りである．

統合開発環境
  CS+ V6.01.00
  (IronPythonコンソール・プラグイン 使用)

ターミナルソフトウェア
  TeraTerm Version4.83

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(3) COMスタックの用意
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
atk2-sc3フォルダ同じ階層にa-comstackフォルダを配置する．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(4) CANコンフィギュレーションとジェネレーション
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
a-comstack/can/target/hsbrh850f1k_ccrh/sample/cancfg.batを実行すると，
YAMLフォーマット(can.yaml)で記述したコンフィギュレーション情報を
arxmlフォーマットへ変換する(can.arxml).
その後，can.arxmlからコンフィギュレーションに従ったファイル群を生成する．

以下のファイルが出力されていればコンフィギュレーション及び
ジェネレーションは成功となる．
  ・Can_PBcfg.c
  ・Can_Cfg.h

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(5) サンプルプログラム
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
―――――――――――――――――――――――――――――――――――
(5.1) サンプルプログラム概要
―――――――――――――――――――――――――――――――――――
・1秒毎にCANバスへメッセージを送信する．
  ・初期状態でFCN0から送信する．
・MainTaskで周期的に評価ボードのSW2の状態をチェックし，状態が変化した
  場合，送信するチャンネルをFCN1に切り替える．
  ・拡張ボードを接続している場合，SW2ではなく，拡張ボードのDIPスイッチ1
    の状態によって切り替える．

■CAN送信処理
  データ長(length)：8のデータを送信(Can_Write)する．
  データは{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07}を初期値として，
  送信するたびに，全バイト値をインクリメントする．(0xFFを上限とする)
  CAN-ID，HTHは以下のとおり．
  [FCN0]CAN-IDを0x001，HTHを3を設定する．
  [FCN1]CAN-IDを0x003，HTHを8を設定する．
  送信時にHTH，CAN-ID，データ長，データをログとして出力する．
  送信が成功した場合，送信完了通知(CanIf_TxConfirmation)が表示される．

■CAN受信処理
  CANの受信メールボックスのコンフィギュレーションに対応するデータを送信
  されてきた場合は受信完了通知(CanIf_RxIndication)と受信したIDとデータ
  について表示される．
    受信メールボックスのコンフィギュレーション簡易的な内容
      [CANコントローラ0]
       ・メールボックスID：0，CAN-ID：0x123，フィルタマスク値：0xFFE
       ・メールボックスID：1，CAN-ID：0x003，フィルタマスク値：設定無し
       ・メールボックスID：2，CAN-ID：0x004，フィルタマスク値：設定無し
      [CANコントローラ0]
       ・メールボックスID：5，CAN-ID：0x010，フィルタマスク値：0x0F0
       ・メールボックスID：6，CAN-ID：0x001，フィルタマスク値：設定無し
       ・メールボックスID：7，CAN-ID：0x002，フィルタマスク値：設定無し

―――――――――――――――――――――――――――――――――――
(5.2) ビルド＆実行
―――――――――――――――――――――――――――――――――――
1. 前述の(4)により，ジェネレーションを行う．

2. def.pyをテキストエディタで開き，TARGETおよびTARGET_MCUを設定する．

3. configure.mtpjをCS+で開く．(atk2-sc1.mtpjが作成される)

4. メニューから ビルド -> ビルド・プロジェクト を選択する．
     cfg→kernel→atk2-sc1 の順にビルドされる．
     ビルドの結果が出力されているコンソールでエラーが無いことを確認する．

5. メニューから デバッグ -> デバッグ・ツールへダウンロード を選択する．
     実行ログ確認のためにターミナルソフトウェア(TeraTerm等)を起動する．
     ターミナルソフトウェアの設定は以下にしておく．
     <例：TeraTerm使用の場合>
       ポート      ：使用するCOMポート番号
       ボーレート  ：115200
       データ      ：8Bit

6. メニューから デバッグ -> 実行 を選択する．
     実行ログがターミナルソフトウェアで確認できれば，実行確認完了となる．



以上．
