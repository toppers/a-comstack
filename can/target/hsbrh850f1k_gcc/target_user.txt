
	TOPPERS/A-CAN
        ＜Nios2ターゲット依存部マニュアル＞

本ドキュメントは，AUTOSAR仕様をベースとしたA-CANをnios2_dev_gccで使用
する場合のターゲット依存部の情報を記述したものである．

----------------------------------------------------------------------
TOPPERS/A-CAN
    Automotive CAN

Copyright (C) 2014 by Center for Embedded Computing Systems
            Graduate School of Information Science, Nagoya Univ., JAPAN
Copyright (C) 2014 by FUJI SOFT INCORPORATED, JAPAN

上記著作権者は，以下の (1)〜(3)の条件を満たす場合に限り，本ドキュメ
ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
(1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
    および下記の無保証規定が，そのままの形でドキュメント中に含まれて
    いること．
(2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
    を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
    ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
    りではない．
(3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
    からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
    本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
    く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

本ドキュメントは，AUTOSAR（AUTomotive Open System ARchitecture）仕様
に基づいている．上記の許諾は，AUTOSARの知的財産権を許諾するものではな
い．AUTOSARは，AUTOSAR仕様に基づいたソフトウェアを商用目的で利用する
者に対して，AUTOSARパートナーになることを求めている．

本ドキュメントは，無保証で提供されているものである．上記著作権者およ
びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
により直接的または間接的に生じたいかなる損害に関しても，その責任を負
わない．

$Id$
----------------------------------------------------------------------

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(1) 概要
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
A-CANのNios2ターゲット依存部（nios2_dev_gcc依存部）は，
Altera社のNios2プロセッサを搭載した評価ボードをサポートしている．

本ドキュメントでは，Nios2評価ボードを使用する場合のターゲットに依存する
CANモジュールの各機能のサポート有無について説明をする．

CANコントローラの接続方法は以下を参照すること．
http://www.toppers.jp/docs/tech/can_controller.pdf

―――――――――――――――――――――――――――――――――――
(1.1) フォルダ構成
―――――――――――――――――――――――――――――――――――
A-CAN(nios2_dev_gcc)フォルダの構成について以下の通りとなる．

nios2_dev_gcc          ：nios2_dev_gcc依存部
 ┣ Can_Irq.c          ：割込みサービスルーチン用ファイル
 ┣ Can_Target.h       ：依存部処理ファイル
 ┣ Can_Target.tf      ：依存部テンプレートファイル
 ┣ target_user.txt    ：本ドキュメント
 ┗ sample             ：サンプルアプリケーション(nios2_dev_gcc用)

―――――――――――――――――――――――――――――――――――
(1.2) Nios2用CANコントローラ仕様
―――――――――――――――――――――――――――――――――――
コントローラ数：1
送信メッセージボックス最大数：16
受信メッセージボックス最大数：32
メッセージマネジメント：FullCAN
CAN-IDメッセージ長：スタンダード(11bit)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(2) CANモジュール機能の各サポートについて
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

―――――――――――――――――――――――――――――――――――
(2.1) CANコントローラモード管理
―――――――――――――――――――――――――――――――――――
■nios2_dev_gcc依存部ではCANコントローラの状態はスタート(CAN_T_START)
  とストップ(CAN_T_STOP)の2つ状態管理のみ対応する．
  スリープ(CAN_T_SLEEP)とウェイクアップ(CAN_T_WAKEUP)について未サポート
  としており，以下の関連する依存部の関数についても未対応とする．
    ・can_target_sleep_controller_and_change_interrupt
    ・can_target_wakeup_controller_and_change_interrupt
    ・can_target_check_wakeup

―――――――――――――――――――――――――――――――――――
(2.2) ボーレートの設定
―――――――――――――――――――――――――――――――――――
■nios2_dev_gcc依存部では分周比，サンプルポイントは固定値を使用して
  ボーレートの設定を行っているため，ボーレート設定時に使用する情報
  (Can_ControllerBaudrateConfigType)のパラメータについて，以下は未使用
  とする．
    ・CanControllerPropSeg
    ・CanControllerSeg1
    ・CanControllerSeg2
    ・CanControllerSyncJumpWidth
  使用できるボーレートは250kbpsと500kbpsとする．

―――――――――――――――――――――――――――――――――――
(2.3) 割込みサービスルーチン
―――――――――――――――――――――――――――――――――――
■Nios2用CANコントローラでは受信割込み要求と送信割込み要求のレジスタ
  は同一のレジスタを使用する．そのためCan_Irq.cでは送受信用割込み要求
  用のISRを1つ用意し，割込み発生(ISRの実行)時に割込み要求レジスタ
  (CANC_RD_IRQ_REG)から送受信を判別して送受信割込みサービスルーチンを
  呼び出す．

―――――――――――――――――――――――――――――――――――
(2.4) 受信オーバライト
―――――――――――――――――――――――――――――――――――
■Nios2用CANコントローラでは，受信状態のまま，新規のメッセージ受信した
  場合はメッセージのオーバライト(上書き)する．オーバライト発生する場合
  に受信ウェイトレジスタ(CANC_WR_RXWAIT_REG)を使用してウェイトを入れる
  設定があるが，nios2_dev_gcc依存部ではウェイト処理は使用しない．

―――――――――――――――――――――――――――――――――――
(2.5) Can_MainFunction_Modeの使用
―――――――――――――――――――――――――――――――――――
■Can_MainFunction_Modeの動作はBSWスケジューラによって決定するが，
  nios2_dev_gcc依存部ではBSWスケジューラの対応はしていないため，
  Can_MainFunction_Modeは使用しない．

―――――――――――――――――――――――――――――――――――
(2.6) ビジーウェイト処理
―――――――――――――――――――――――――――――――――――
■nios2_dev_gcc依存部ではレジスタの設定を行い，その直後に設定が反映され
  たかを判定する処理があるため，レジスタの設定処理後の設定反映待ちを考
  慮してビジーウェイト処理(can_target_busy_wait)を使用する．
  can_target_busy_waitでは依存部固有の時間でタイムアウトするように
  ループのみの処理(何も処理を行わない)を実施する．

  nios2_dev_gcc依存部では100MHzのクロック周波数に対して実行クロック数が
  4(ループ処理)となるため，ビジーウェイト内のループ回数を100000回に設定
  して，ビジーウェイトの処理時間を約4msecとしている．ビジーウェイト処理
  はCanTimeoutDurationによるタイムアウト処理内で使用しており，タイムア
  ウト時間をサンプルでは100msecとしているため，25回程度リトライすること
  を想定している．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(3) 設定パラメータ制約
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
以下の制約に反するディスクリプションファイルを入力した場合，ジェネレー
タはエラーを検出する．

―――――――――――――――――――――――――――――――――――
(3.1) CanController
―――――――――――――――――――――――――――――――――――
■Nios2用CANコントローラのコントローラ数は1であるため，それより多く定義
  した場合，エラーとする．

―――――――――――――――――――――――――――――――――――
(3.2) CanControllerId
―――――――――――――――――――――――――――――――――――
■Nios2用CANコントローラの数は1つであるため，CanControllerIdに0以外を
  指定した場合，エラーとする．

―――――――――――――――――――――――――――――――――――
(3.3) CanControllerBaudRate
―――――――――――――――――――――――――――――――――――
■CanControllerBaudRateに250または500以外を指定した場合，エラーとする．

―――――――――――――――――――――――――――――――――――
(3.4) CanHandleType
―――――――――――――――――――――――――――――――――――
■Nios2用CANコントローラのハードウェアオブジェクトはFullCANであるため，
  CanHandleTypeにFULL以外を指定した場合，エラーとする．

―――――――――――――――――――――――――――――――――――
(3.5) CanIdType
―――――――――――――――――――――――――――――――――――
■サポートするCAN-IDはスタンダード(11bit)のみであるため，
  CanIdTypeにSTANDARD以外を指定した場合，エラーとする．

―――――――――――――――――――――――――――――――――――
(3.6) CanObjectId
―――――――――――――――――――――――――――――――――――
■Nios2用CANコントローラのメールボックス数はコントローラごとに受信が
  32個，送信が16個であるため，CanObjectIdを48より多く定義した場合，
  エラーとする．

―――――――――――――――――――――――――――――――――――
(3.7) CanFilterMask
―――――――――――――――――――――――――――――――――――
■Nios2用CANコントローラにてフィルタマスクを設定できる数は，
  受信メールボックスごとに32個であるため，それより多く定義した場合，
  エラーとする．

―――――――――――――――――――――――――――――――――――
(3.8) CanFilterMaskRef
―――――――――――――――――――――――――――――――――――
■CanHardwareObject/CanControllerRefで参照するCanControllerと，
  CanFilterMaskRefが参照するCanController/CanFilterMaskのCanController
  は同じCanControllerを指定するべきであるため，違うCanControllerが指定
  されていた場合，エラーとする．



以上
