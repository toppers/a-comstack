
	TOPPRES/A-CAN サンプルプログラム実行手順
        ＜Nios2ターゲット依存部用＞

本ドキュメントは，TOPPRES/A-CAN(nios2_dev_gcc)の動作確認のための
サンプルプログラムをTOPPERS/ATK2で実行する手順を示す．

----------------------------------------------------------------------
TOPPERS/A-CAN
    Automotive CAN

Copyright (C) 2014-2020 by Center for Embedded Computing Systems
            Graduate School of Information Science, Nagoya Univ., JAPAN
Copyright (C) 2014 by FUJI SOFT INCORPORATED, JAPAN
Copyright (C) 2018-2020 by CRESCO LTD., JAPAN
Copyright (C) 2018-2020 by ICOMSYSTECH Co.,Ltd., JAPAN

上記著作権者は，以下の (1)～(3)の条件を満たす場合に限り，本ドキュメ
ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
(1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
    および下記の無保証規定が，そのままの形でドキュメント中に含まれて
    いること．
(2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
    を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
    ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
    りではない．
(3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
    からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
    本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
    く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

本ドキュメントは，AUTOSAR（AUTomotive Open System ARchitecture）仕様
に基づいている．上記の許諾は，AUTOSARの知的財産権を許諾するものではな
い．AUTOSARは，AUTOSAR仕様に基づいたソフトウェアを商用目的で利用する
者に対して，AUTOSARパートナーになることを求めている．

本ドキュメントは，無保証で提供されているものである．上記著作権者およ
びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
により直接的または間接的に生じたいかなる損害に関しても，その責任を負
わない．

$Id$
----------------------------------------------------------------------

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(1) TOPPERS/ATK2動作環境の用意
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
TOPPERS/ATK2を入手し，付属のサンプルプログラムが動作する環境を構築する．

※以下，TOPPERS/ATK2-SC1を使用した場合の手順を示す

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(2) COMスタックの用意
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
atk2-sc1フォルダを相対パスで指定可能な位置へ，a-comstackフォルダを配置
する．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(3) パスの設定
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Makefileを開き，atk2-sc1フォルダへの相対パスを，環境変数SRCDIRへ設定す
る．デフォルトでは，以下のフォルダ構成を想定した状態となっている．

atk2-sc1  /cfg/cfg/cfg.exe
            :
a-comstack/can/target/hsbrh850f1k_gcc/sample/Makefile -> SRCDIR="../../../atk2-sc1"

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(4) CANコンフィギュレーション
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
AUTOSAR仕様に従って，CANのコンフィギュレーション情報をcan.arxmlとして
作成する．
A-CAN付属のXML生成ツールを用いると，YAMLフォーマットで記述した
コンフィギュレーション情報(can.yaml)をarxmlフォーマットへ変換すること
ができる．

■実行ファイル
  a-comstack/utils/abrex/abrex.rb

■マニュアル
  a-comstack/utils/abrex/readme.txt

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(5) CANジェネレーション
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
以下のコマンドにより，can.arxmlからコンフィギュレーションに従ったファイ
ル群を生成する．

$ cd a-comstack/can/target/hsbrh850f1k_gcc/sample
$ make can

以下のファイルが出力されていればジェネレーションは成功となる．
  ・Can_PBcfg.c
  ・Can_Cfg.h

※can.arxmlとは別のarxmlからジェネレーションを実行したい場合，
  MakefileのCAN_CFGNAMEを変更する
※ジェネレーションしたファイルを削除する場合は以下を実行する
  $ make canclean

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(6) サンプルプログラム
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
―――――――――――――――――――――――――――――――――――
(6.1) バッファの割り付け及びリンク
―――――――――――――――――――――――――――――――――――
下記のCan_Prc.hで設定されたバッファとそれに対する設定について説明する。

■バッファ
  ・送信バッファ0
  ・送信バッファ1
  ・送信バッファ2
  ・送信バッファ3
  ・送信バッファ4
  ・送受信FIFOバッファ0
  ・送信バッファ6
  ・送信バッファ7
  ・送信バッファ8
  ・送信バッファ9
  ・送受信FIFOバッファ1
  ・送信キュー
  ・送信キュー
  ・送信キュー
  ・送信キュー
  ・送信キュー

■送信バッファ
  送信バッファは1つのチャンネルに16 個のバッファを持つ。
  ・使用の有無の設定
    ・送信バッファは最も基本となる送信方法で、他の設定がなければ送信
      バッファで決まる。

■送受信FIFOリンク
  送受信FIFOバッファは1つのチャンネルに3本のバッファを持っている。
  送信バッファにリンクして使用する。
  ・使用の有無の設定
    ・RSCAN0CFCCレジスタのCFEビットを1に設定して使用を許可する。
  ・モードの設定
    ・RSCAN0CFCCレジスタのCFM[1:0]ビットを"01"に設定して送信モードを選択する。
  ・リンク
    ・RSCAN0CFCCレジスタのCFTML[3:0]ビットにリンクするバッファの番号を設定する。
    ・リンクは送信モードまたはゲートウェイモードの時設定する。

■送信キュー割り付け
  送信キューは送信バッファに割り付け(3~16個)して使用する。
  ・使用の有無の設定
    ・RSCAN0TXQCCレジスタのTXQEビットを1に設定して使用を許可する。
  ・割り付け
    ・RSCAN0TXQCCレジスタのTXQDC[3:0]ビットを利用して割り付ける送信キューの段数を設定する。

―――――――――――――――――――――――――――――――――――
(6.2) ビルド＆実行
―――――――――――――――――――――――――――――――――――
■ビルド
  $ cd a-comstack/can/target/hsbrh850f1k_gcc/sample
  $ make depend
  $ make

■実行
  ・hsbrh850f1k-debug.mtpjでダウンロードするファイルを設定
    ・sampleフォルダのatk2-sc1.exe
  ・ダウンロード後にCPUのリセット設定
    ・いいえ(ダウンロード後、CPUをリセットすると、SendTaskで入力した
      送信データの値が変わる。)
  ・デバッガ·ツールにダウンロード
  ・実行

以上．
