
	TOPPRES/A-CAN サンプルプログラム実行手順
        ＜Nios2ターゲット依存部用＞

本ドキュメントは，TOPPRES/A-CAN(nios2_dev_gcc)の動作確認のための
サンプルプログラムをTOPPERS/ATK2で実行する手順を示す．

----------------------------------------------------------------------
TOPPERS/A-CAN
    Automotive CAN

Copyright (C) 2014 by Center for Embedded Computing Systems
            Graduate School of Information Science, Nagoya Univ., JAPAN
Copyright (C) 2014 by FUJI SOFT INCORPORATED, JAPAN

上記著作権者は，以下の (1)〜(3)の条件を満たす場合に限り，本ドキュメ
ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
(1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
    および下記の無保証規定が，そのままの形でドキュメント中に含まれて
    いること．
(2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
    を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
    ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
    りではない．
(3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
    からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
    本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
    く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

本ドキュメントは，AUTOSAR（AUTomotive Open System ARchitecture）仕様
に基づいている．上記の許諾は，AUTOSARの知的財産権を許諾するものではな
い．AUTOSARは，AUTOSAR仕様に基づいたソフトウェアを商用目的で利用する
者に対して，AUTOSARパートナーになることを求めている．

本ドキュメントは，無保証で提供されているものである．上記著作権者およ
びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
により直接的または間接的に生じたいかなる損害に関しても，その責任を負
わない．

$Id: readme.txt 599 2014-10-17 01:27:58Z shigihara $
----------------------------------------------------------------------

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(1) TOPPERS/ATK2動作環境の用意
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
TOPPERS/ATK2を入手し，付属のサンプルプログラムが動作する環境を構築する．

※以下，TOPPERS/ATK2-SC1を使用した場合の手順を示す

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(2) COMスタックの用意
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
atk2-sc1フォルダを相対パスで指定可能な位置へ，a-comstackフォルダを配置
する．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(3) パスの設定
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Makefileを開き，atk2-sc1フォルダへの相対パスを，環境変数SRCDIRへ設定す
る．デフォルトでは，以下のフォルダ構成を想定した状態となっている．

atk2-sc1  /cfg/cfg/cfg.exe
            :
a-comstack/can/target/nios2_dev_gcc/sample/Makefile -> SRCDIR="../../../atk2-sc1"

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(4) CANコンフィギュレーション
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
AUTOSAR仕様に従って，CANのコンフィギュレーション情報をcan.arxmlとして
作成する．
A-CAN付属のXML生成ツールを用いると，YAMLフォーマットで記述した
コンフィギュレーション情報(can.yaml)をarxmlフォーマットへ変換すること
ができる．

■実行ファイル
  a-comstack/utils/abrex/abrex.rb

■マニュアル
  a-comstack/utils/abrex/readme.txt

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(5) CANジェネレーション
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
以下のコマンドにより，can.arxmlからコンフィギュレーションに従ったファイ
ル群を生成する．

$ cd a-comstack/can/target/nios2_dev_gcc/sample
$ make can

以下のファイルが出力されていればジェネレーションは成功となる．
  ・Can_PBcfg.c
  ・Can_Cfg.h

※can.arxmlとは別のarxmlからジェネレーションを実行したい場合，
  MakefileのCAN_CFGNAMEを変更する
※ジェネレーションしたファイルを削除する場合は以下を実行する
  $ make canclean

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(6) サンプルプログラム
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
―――――――――――――――――――――――――――――――――――
(6.1) サンプルプログラム概要
―――――――――――――――――――――――――――――――――――
MainTaskで評価ボードのSW(KEY0，KEY1，KEY2，KEY3)の状態をチェックし，
押下されたSWまたは受信したデータによって以下の処理を行う．

■CAN送信処理
  以下のSWが押下時にデータ長(length)：8のデータを送信(Can_Write)する．
  データは{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07}
  の固定値として，SW押下別に以下の条件で処理を行う．
    ・KEY0：CAN-IDを0x000，HTHを4を設定する．
    ・KEY1：CAN-IDを0x001，HTHを5を設定する．
    ・KEY2：CAN-IDを0x002，HTHを6を設定する．
    ・KEY3：CAN-IDを0x003，HTHを7を設定する．
  送信時にHTH，CAN-ID，データ長，データをログとして出力する．
  送信が成功した場合，送信完了通知(CanIf_TxConfirmation)が表示される．

■CAN受信処理
  CANの受信メールボックスのコンフィギュレーションに対応するデータを送信
  されてきた場合は受信完了通知(CanIf_RxIndication)と受信したIDとデータに
  ついて表示される．
    受信メールボックスのコンフィギュレーション簡易的な内容
     ・メールボックスID：0，CAN-ID：0x123，フィルタマスク値：0xFFE
     ・メールボックスID：1，CAN-ID：0x100，フィルタマスク値：0x0F0
     ・メールボックスID：2，CAN-ID：0x010，フィルタマスク値：0x00F
     ・メールボックスID：3，CAN-ID：0x001，フィルタマスク値：設定無し

―――――――――――――――――――――――――――――――――――
(6.2) ビルド＆実行
―――――――――――――――――――――――――――――――――――
$ cd a-comstack/can/target/nios2_dev_gcc/sample
$ make depend
$ make
$ make run



以上．
